<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_stand_front</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*
moving_speed = 5;
player_life = 300;
direction = 270;
image_speed = 0;
image_index = 1;
initial = 1;
key_pressed = 0;
*/

hp_bar = self

//Walking Speed of RPG Sprite
playerSpeed = 5;

//halfs the sprite speed
image_speed = 0.5;

//Are we allowed to travel in this direction?
right = false;
left = false;
up = false;
down = false;

inst = instance_nearest(x, y, obj_rock)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//This script checks to see if the player can move up, down, right, left
//Checks for collision volumes
//remember if you add multiple speeds you have to check for each speed

//right
if (place_meeting ( x + playerSpeed, y, obj_rock) ||
    place_meeting ( x + playerSpeed, y, obj_mother) ||
    place_meeting ( x + playerSpeed, y, obj_tower))
{
    right = false;
}
else
{
    right = true;
}

//left
if (place_meeting ( x - playerSpeed, y, obj_rock) ||
    place_meeting ( x - playerSpeed, y, obj_mother) ||
    place_meeting ( x - playerSpeed, y, obj_tower))
{
    left = false;
}
else
{
    left = true;
}

//up
if (place_meeting ( x, y - playerSpeed, obj_rock) ||
    place_meeting ( x, y - playerSpeed, obj_mother) ||
    place_meeting ( x, y - playerSpeed, obj_tower))
{
    up = false;
}
else
{
    up = true;
}

//down
if (place_meeting ( x, y + playerSpeed, obj_rock) ||
    place_meeting ( x, y + playerSpeed, obj_mother) ||
    place_meeting ( x, y + playerSpeed, obj_tower))
{
    down = false;
}
else
{
    down = true;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*
if (keyboard_check_released(vk_up) ||
    keyboard_check_released(vk_down) ||
    keyboard_check_released(vk_left) ||
    keyboard_check_released(vk_right))
{
    key_pressed -= 1;
    if key_pressed == 0
    {
        image_speed = 0;
        image_index = 1;
    }
    speed = 0;
}

if (keyboard_check_pressed(vk_up) ||
    keyboard_check_pressed(vk_down) ||
    keyboard_check_pressed(vk_left) ||
    keyboard_check_pressed(vk_right)) 
{
    image_index = 0;
    image_speed = 0.3;
    initial = 0;
    key_pressed += 1;
    speed = moving_speed;
}

switch (direction div 90)
{
    case 0: sprite_index = spr_walk_right; break;
    case 1: sprite_index = spr_walk_behind; break;
    case 2: sprite_index = spr_walk_left; break;
    case 3: sprite_index = spr_walk_front; break;
}

if initial == 1
    image_index = 1;
*/


//Shortcuts for key listeners
MOVELEFT = keyboard_check(vk_left);
MOVERIGHT = keyboard_check(vk_right);
MOVEUP = keyboard_check(vk_up);
MOVEDOWN = keyboard_check(vk_down);
SPACE = keyboard_check(vk_space);

//player moves up when up is pressed

if (MOVEUP &amp;&amp; !MOVERIGHT &amp;&amp; !MOVEDOWN &amp;&amp; !MOVELEFT &amp;&amp;
    y &gt;= 0 + sprite_height/2 &amp;&amp; up)
{
    y -= playerSpeed;
    sprite_index = spr_walk_behind;
}

//Move down
else if (!MOVEUP &amp;&amp; !MOVERIGHT &amp;&amp; MOVEDOWN &amp;&amp; !MOVELEFT &amp;&amp;
    y &lt;= room_height - sprite_height/2 &amp;&amp; down)
{
    y += playerSpeed;
    sprite_index = spr_walk_front;
}

//Move Right
else if (!MOVEUP &amp;&amp; MOVERIGHT &amp;&amp; !MOVEDOWN &amp;&amp; !MOVELEFT &amp;&amp;
    x &lt;= room_width - sprite_width/2 &amp;&amp; right)
{
    x += playerSpeed;
    sprite_index = spr_walk_right;
}

//Move left
else if (!MOVEUP &amp;&amp; !MOVERIGHT &amp;&amp; !MOVEDOWN &amp;&amp; MOVELEFT &amp;&amp;
    x &gt;= 0 + sprite_width/2 &amp;&amp; left)
{
    x -= playerSpeed;
    sprite_index = spr_walk_left;
}
/*
//Closes the gap on the right
else if (!MOVEUP &amp;&amp; MOVERIGHT &amp;&amp; !MOVEDOWN &amp;&amp; !MOVELEFT &amp;&amp;
    x &lt; room_width - sprite_width/2 &amp;&amp; !right)
{
    while (!place_meeting( x + 1, y, obj_rock) )
    {
        x += 1;
    }
}

//Closes the gap on the left
else if (!MOVEUP &amp;&amp; !MOVERIGHT &amp;&amp; !MOVEDOWN &amp;&amp; MOVELEFT &amp;&amp;
    x &gt;= 0 + sprite_width/2 &amp;&amp; !left)
{
    while (!place_meeting( x - 1, y, obj_rock) )
    {
        x -= 1;
    }
}

//Closes the gap on the up
else if (MOVEUP &amp;&amp; !MOVERIGHT &amp;&amp; !MOVEDOWN &amp;&amp; !MOVELEFT &amp;&amp;
    y &gt;= 0 + sprite_height/2 &amp;&amp; !up)
{
    while (!place_meeting( x, y - 1, obj_rock) )
    {
        y -= 1;
    }
}

//Closes the gap on the down
else if (!MOVEUP &amp;&amp; !MOVERIGHT &amp;&amp; MOVEDOWN &amp;&amp; !MOVELEFT &amp;&amp;
    y &lt;= room_height - sprite_height/2 &amp;&amp; !down)
{
    while (!place_meeting( x, y + 1, obj_rock) )
    {
        y += 1;
    }
}
*/

//Idle
else
{
    sprite_index = spr_stand_front;   
}

if distance_to_object(instance_nearest(x, y, obj_rock)) &lt; 10
    inst = instance_nearest(x, y, obj_rock);



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_rock">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string></string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_asteroid">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//player_life = player_life -10;

/*
if player_life &lt; 0 {
    game_end();
    instance_destroy();
}
*/
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>115</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_bounce</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>4</kind>
            <string>0</string>
          </argument>
          <argument>
            <kind>4</kind>
            <string>1</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="40">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//if (!place_meeting(x, y - moving_speed, obj_rock) &amp;&amp;
//    !place_meeting(x, y - moving_speed, obj_tower))
  //  y += moving_speed;

direction = 270;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="39">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//if (!place_meeting(x + moving_speed, y, obj_rock) &amp;&amp;
//    !place_meeting(x + moving_speed, y, obj_tower))
//    x += moving_speed;

direction = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="38">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//if (!place_meeting(x, y - moving_speed, obj_rock) &amp;&amp;
//    !place_meeting(x, y - moving_speed, obj_tower))
  //  y -= moving_speed;

direction = 90;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="37">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
//if (!place_meeting(x - moving_speed, y, obj_rock) &amp;&amp;
 //   !place_meeting(x - moving_speed, y, obj_tower))
//x -= moving_speed;

direction = 180;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="87">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if keyboard_check_pressed(vk_numpad1) {
    instance_create(obj_player.x, obj_player.y, object_builing);
}
else if keyboard_check_pressed(vk_numpad2) {
    instance_create(obj_player.x, obj_player.y, object_builing);
}
else if keyboard_check_pressed(vk_numpad3) {
    instance_create(obj_player.x, obj_player.y, object_builing);
}
else if keyboard_check_pressed(vk_numpad4) {
    instance_create(obj_player.x, obj_player.y, object_builing);
}

else if keyboard_check_pressed(vk_numpad5) {
    instance_create(x, y, obj_b[0]);
}
else if keyboard_check_pressed(vk_numpad6) {
    instance_create(x, y, obj_b[0]);
}
else if keyboard_check_pressed(vk_numpad7) {
    instance_create(x, y, obj_b[0]);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="32">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
if instance_exists(obj_rock) {
        if distance_to_object(inst) &lt; 10 {
            inst.hp = inst.hp - 1
            if(!instance_exists(hp_bar) || hp_bar == self)
                hp_bar = instance_create(inst.x,inst.y-22,obj_hp_gage)
            if(instance_exists(hp_bar))
            {
                hp_bar.max_hp = 3.0
                hp_bar.current_hp = inst.hp
            }
            if(inst.hp == 0)
            {
                with(hp_bar)
                    instance_destroy();
                hp_bar = self;
                with(inst)
                    instance_destroy();
            }
        }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>1</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>

<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player_front</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_lifeform_parent</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
//Stat
spd = global.enemy_spd;
max_hp = global.enemy_hp;
current_hp = global.enemy_hp;

//Attack Tower
atk_dmg = 50;
atk_range = 100;
atk_spd = 40;
atk_timer = 0;
target_tower = -1;

//for movement
rand = irandom_range(1,12);

switch(rand) {
    case 1:
        enemy_sprite_front = spr_enemy1_front;
        enemy_sprite_back = spr_enemy1_back;
        enemy_sprite_left = spr_enemy1_left;
        enemy_sprite_right = spr_enemy1_right;
        break;
    case 2:
        enemy_sprite_front = spr_enemy2_front;
        enemy_sprite_back = spr_enemy2_back;
        enemy_sprite_left = spr_enemy2_left;
        enemy_sprite_right = spr_enemy2_right;
        break;
    case 3:
        enemy_sprite_front = spr_enemy3_front;
        enemy_sprite_back = spr_enemy3_back;
        enemy_sprite_left = spr_enemy3_left;
        enemy_sprite_right = spr_enemy3_right;
        break;
    case 4:
        enemy_sprite_front = spr_enemy4_front;
        enemy_sprite_back = spr_enemy4_back;
        enemy_sprite_left = spr_enemy4_left;
        enemy_sprite_right = spr_enemy4_right;
        break;
    case 5:
        enemy_sprite_front = spr_enemy5_front;
        enemy_sprite_back = spr_enemy5_back;
        enemy_sprite_left = spr_enemy5_left;
        enemy_sprite_right = spr_enemy5_right;
        break;
    case 6:
        enemy_sprite_front = spr_enemy6_front;
        enemy_sprite_back = spr_enemy6_back;
        enemy_sprite_left = spr_enemy6_left;
        enemy_sprite_right = spr_enemy6_right;
        break;
    case 7:
        enemy_sprite_front = spr_enemy7_front;
        enemy_sprite_back = spr_enemy7_back;
        enemy_sprite_left = spr_enemy7_left;
        enemy_sprite_right = spr_enemy7_right;
        break;
    case 8:
        enemy_sprite_front = spr_enemy8_front;
        enemy_sprite_back = spr_enemy8_back;
        enemy_sprite_left = spr_enemy8_left;
        enemy_sprite_right = spr_enemy8_right;
        break;
    case 9:
        enemy_sprite_front = spr_enemy9_front;
        enemy_sprite_back = spr_enemy9_back;
        enemy_sprite_left = spr_enemy9_left;
        enemy_sprite_right = spr_enemy9_right;
        break;
    case 10:
        enemy_sprite_front = spr_enemy10_front;
        enemy_sprite_back = spr_enemy10_back;
        enemy_sprite_left = spr_enemy10_left;
        enemy_sprite_right = spr_enemy10_right;
        break;
    case 11:
        enemy_sprite_front = spr_enemy11_front;
        enemy_sprite_back = spr_enemy11_back;
        enemy_sprite_left = spr_enemy11_left;
        enemy_sprite_right = spr_enemy11_right;
        break;
    case 12:
        enemy_sprite_front = spr_enemy12_front;
        enemy_sprite_back = spr_enemy12_back;
        enemy_sprite_left = spr_enemy12_left;
        enemy_sprite_right = spr_enemy12_right;
        break;
}

udlr_dir = 0; //direction: up,down,left,right
dir = 0;
phy_angular_velocity = 0;
angle_to_rotate = 0;
facing_direction = -90;

if global.level % 10 == 0 {
    type = 1;
    my_target = instance_create(x, y, obj_follow_target_boss);
    
    enemy_sprite_front = spr_boss2_front;
    enemy_sprite_back = spr_boss2_back;
    enemy_sprite_left = spr_boss2_left;
    enemy_sprite_right = spr_boss2_right;
}
else {
    type = 0
    my_target = instance_create(x, y, obj_follow_target);
}

my_target.moving_speed = spd;
move_speed = 0;
slow_factor = 1;
my_path = my_target.path;
moving = my_target.moving;



//hpgage
hp_gage = instance_create(phy_position_x, phy_position_y-21, obj_hp_container);
hp_gage.max_hp = max_hp;
hp_gage.current_hp = current_hp;
hp_gage.visible = false;
timer = 0;

//effect
//ice
fx_ice_timer = 0;
freeze_time = 0;
ice_effect = instance_create(phy_position_x, phy_position_y, obj_effect_ice);
ice_effect.image_speed = 0;
ice_effect.visible = false;
frozen_x = 0;
frozen_y = 0;
//thunder
fx_thunder_timer = 0;
thunder_effect = instance_create(phy_position_x, phy_position_y, obj_effect_thunder);
thunder_effect.image_speed = 0.3;
thunder_effect.visible = false;

//wind
fx_wind_timer = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Destroyed

//show_debug_message("Enemy Destroyed");

with(my_target){
  instance_destroy();
}
with(hp_gage){
  instance_destroy();
}
with(thunder_effect){
  instance_destroy();
}
with(ice_effect){
  instance_destroy();
}
global.num_killed += 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Enemy actions
//Follow Target
move_speed = spd/slow_factor;
moving = my_target.moving;
//show_debug_message("phy_speed_x = " + string(phy_speed_x));
//show_debug_message("phy_speed_y = " + string(phy_speed_y));
//show_debug_message("phy_linear_velocity_x = " + string(phy_linear_velocity_x));
//show_debug_message("phy_linear_velocity_y = " + string(phy_linear_velocity_y));
if (point_distance(my_target.x, my_target.y, phy_position_x, phy_position_y) &gt; 20){
  my_target.wait = 1;
  my_target.x = phy_position_x;
  my_target.y = phy_position_y;
}
else{
  my_target.wait = 0;
}
if (moving == 1){
  dir = point_direction(my_target.x, my_target.y, phy_position_x, phy_position_y);
  dist = point_distance(my_target.x, my_target.y, phy_position_x, phy_position_y);
  dx = lengthdir_x(move_speed, dir);
  dy = lengthdir_y(move_speed, dir);
  phy_position_x -= dx;
  phy_position_y -= dy;
}
else{
  dir = facing_direction;
  dx = 0;
  dy = 0;
}

//Attack nearest Tower
atk_timer = (atk_timer+1) % (70 - atk_spd);
//show_debug_message("Attack Timer = " + string(atk_timer));
if (my_target.atk_mode == 1){
  //show_debug_message("ATTACK MODE ON!!!");
  //show_debug_message("Tower exists? " + string(instance_exists(obj_tower_parent)));
  if (instance_exists(obj_tower_parent)){
    //show_debug_message("Target Exists!");
    if (target_tower == -1 || !instance_exists(target_tower)){
      //show_debug_message("New Target Tower locked");
      target_tower = instance_nearest(phy_position_x, phy_position_y, obj_tower_parent);
    }
    //show_debug_message("x: " + string(obj_player.phy_position_x));
    //show_debug_message("y: " + string(obj_player.phy_position_y));
    //show_debug_message("Target x: " +string(target_tower.phy_position_x));
    //show_debug_message("Target y: " +string(target_tower.phy_position_y));
    dist = point_distance(target_tower.phy_position_x, target_tower.phy_position_y, phy_position_x, phy_position_y);
    if (dist &gt; atk_range){
      //show_debug_message("Target Too Far! Approaching!");
      my_target.approaching = 1;
      my_target.goal_x = target_tower.phy_position_x;
      my_target.goal_y = target_tower.phy_position_y;
    }
    else{
      my_target.approaching = 0;
      my_target.goal_x = my_target.ultimate_goal_x;
      my_target.goal_y = my_target.ultimate_goal_y;
      if (atk_timer == 0){
        //show_debug_message("ATTACKING!!!!!!!!!!!!!!!!!!");
        enemy_bullet = instance_create(phy_position_x, phy_position_y, obj_enemy_bullet);
        enemy_bullet.dmg = atk_dmg;
        enemy_bullet.target = target_tower;
      }
    }
  }
  else{
    my_target.atk_mode = 0;
  }
}
else{
  target_tower = -1;
}

//Face direction
angle_to_rotate = facing_direction - dir;
//phy_rotation += angle_to_rotate;
facing_direction -= angle_to_rotate;

if (facing_direction &gt;= 45) and (facing_direction &lt; 135)
{
  udlr_dir = 0; //down
}
else if (facing_direction &gt;= 135) and (facing_direction &lt; 225)
{
  udlr_dir = 1; //right
}
else if (facing_direction &gt;= 225) and (facing_direction &lt; 315)
{
  udlr_dir = 2; //up
}
else
{
  udlr_dir = 3; //left
}
if (moving != 1){
  udlr_dir = 4; //idle
}
switch (udlr_dir)
{
  case 0:
    sprite_index = enemy_sprite_front;
    image_speed = 1;
    break;
  case 1:
    sprite_index = enemy_sprite_right;
    image_speed = 1;
    break;
  case 2:
    sprite_index = enemy_sprite_back;
    image_speed = 1;
    break;
  case 3:
    sprite_index = enemy_sprite_left;
    image_speed = 1;
    break;
  case 4:
    image_speed = 0;
    break;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_enemy_dest">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Arrives at the destination.

obj_enemy_dest.current_hp -= atk_dmg;
instance_create(phy_position_x, phy_position_y, obj_effect_explosion);

global.num_suicide_enemies += 1;

instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (timer &gt; 0){
  timer -= 1;
}
if (fx_thunder_timer &gt; 0){
  fx_thunder_timer -= 1;
}
if (fx_ice_timer &gt; 0){
  fx_ice_timer -= 1;
}
if (fx_wind_timer &gt; 0){
  fx_wind_timer -=1;
}

draw_self();
if (instance_exists(hp_gage)){
  hp_gage.x = phy_position_x;
  hp_gage.y = phy_position_y-21;
  if (timer &gt; 0){
    hp_gage.current_hp = current_hp;
    hp_gage.visible = true;
  }
  else{
    hp_gage.visible = false;
  }
}

if (instance_exists(thunder_effect)){
  thunder_effect.x = phy_position_x;
  thunder_effect.y = phy_position_y;
  if (fx_thunder_timer &gt; 0){
    thunder_effect.visible = true;
  }
  else{
    thunder_effect.visible = false;
  }
}
if (instance_exists(ice_effect)){
  ice_effect.x = phy_position_x;
  ice_effect.y = phy_position_y;
  if (fx_ice_timer &gt; 0){
    if(fx_ice_timer &gt; round((2/3)*freeze_time)*room_speed){
      ice_effect.image_index = 0;
    }
    else if(fx_ice_timer &gt; round((1/3)*freeze_time)*room_speed){
      ice_effect.image_index = 1;
    }
    else{
      ice_effect.image_index = 2;
    }
    ice_effect.visible = true;
    phy_position_x = frozen_x;
    phy_position_y = frozen_y;
    spd = 0;
  }
  else{
    ice_effect.visible = false;
    spd = global.enemy_spd;
  }
}

if (fx_wind_timer == 0){
  phy_speed_x = 0;
  phy_speed_y = 0;
  phy_linear_velocity_x = 0;
  phy_linear_velocity_y = 0;
}

if(current_hp &lt;= 0){
  score += ((global.level div 10) + 1) * 10;
  instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>-1</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.899999976158142</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>16,16</point>
    <point>16,16</point>
  </PhysicsShapePoints>
</object>

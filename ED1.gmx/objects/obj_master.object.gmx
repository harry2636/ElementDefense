<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>randomize();
is_first = 1;
state = "instruction1" //instruction1, mine, prepare, instruction2, defend

//instruction_time = 
mine_time = 10;
prepare_time = 30;


player_object = obj_player_walking;

global.num_enemies = 0;
global.num_killed = 0;
global.num_suicide_enemies = 0;
global.num_killed_by_tower = 0;

global.level = 1;
global.selected = 0;

global.enemy_hp = 0;
global.enemy_spd = 0;

global.mat_selected[0] = 0;
global.mat_selected[1] = 0;
global.mat_selected[2] = 0;

global.mat_fire = 0;
global.mat_wind = 0;
global.mat_thunder = 0;
global.mat_ice = 0;

global.tower_fire = 0;
global.tower_wind = 0;
global.tower_thunder = 0;
global.tower_ice = 0;
global.tower_wall = 0;

for (i = 0; i &lt; 200; i++) 
{
    do{
        randx = (random(room_width) div 32) * 32 + 16;
        randy = (random(1536) div 32) * 32 + 16;
    } until (not position_meeting(randx,randy, obj_collide_parent))
    instance_create(randx, randy, obj_ele_fire);

    do{
        randx = (random(room_width) div 32) * 32 + 16;
        randy = (random(1536) div 32) * 32 + 16;
    } until (not position_meeting(randx,randy, obj_collide_parent))
    instance_create(randx, randy, obj_ele_wind);

    do{
        randx = (random(room_width) div 32) * 32 + 16;
        randy = (random(1536) div 32) * 32 + 16;
    } until (not position_meeting(randx,randy, obj_collide_parent))
    instance_create(randx, randy, obj_ele_thunder);

    do{
        randx = (random(room_width) div 32) * 32 + 16;
        randy = (random(1536) div 32) * 32 + 16;
    } until (not position_meeting(randx,randy, obj_collide_parent))
    instance_create(randx, randy, obj_ele_ice);
}



//Top scores


//Stage info
stage_num_enemies[0] = 10;
stage_spd_enemies[0] = 1;

normal_hp_enemies[0]=10;
boss_hp_enemies[0]=10;
stage_hp_enemies[0] = 10;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (global.level == 10){
  player_object = obj_player_flying;
}
global.num_killed_by_tower = global.num_killed - global.num_suicide_enemies;
global.tower_wall += global.num_killed_by_tower div 2;
if (global.tower_wall &gt; 30){
  global.tower_wall = 30;
}
global.level += 1;
score += 1000;
if(global.level %10 ==0){
    stage_num_enemies[global.level-1] = 1;
}
else{
    stage_num_enemies[global.level-1] = stage_num_enemies[global.level-2] + 1;
}
if (global.level &lt; 2){
  stage_spd_enemies[global.level-1] = 1;
}  
else if (global.level &lt;5){
  stage_spd_enemies[global.level-1] = 2;
}
else if (global.level &lt;9){
  stage_spd_enemies[global.level-1] = 3;
}
else{
  stage_spd_enemies[global.level-1] = 4;
}
if(global.level %10 ==0){
    stage_hp_enemies[global.level-1] = global.level*global.level*100;
}
else{
    stage_hp_enemies[global.level-1] = (global.level-2)*10*((global.level div 10) + 1) + stage_hp_enemies[global.level-2];
}
room_goto(room_world);
state = "mine";
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (global.level == 10){
  player_object = obj_player_flying;
}
global.num_killed_by_tower = global.num_killed - global.num_suicide_enemies;
global.tower_wall += global.num_killed_by_tower div 2;
if (global.tower_wall &gt; 30){
  global.tower_wall = 30;
}
global.level += 1;
score += 1000;
if(global.level %10 ==0){
    stage_num_enemies[global.level-1] = 1;
}
else{
    stage_num_enemies[global.level-1] = stage_num_enemies[global.level-2] + 1;
}
if (global.level &lt; 2){
  stage_spd_enemies[global.level-1] = 1;
}  
else if (global.level &lt;5){
  stage_spd_enemies[global.level-1] = 2;
}
else if (global.level &lt;9){
  stage_spd_enemies[global.level-1] = 3;
}
else{
  stage_spd_enemies[global.level-1] = 4;
}

boss_hp_enemies[global.level-1] = global.level*global.level*100;
normal_hp_enemies[global.level-1] = (global.level-2)*10*((global.level div 10) + 1) + stage_hp_enemies[global.level-2];

if(global.level%10==0){
    stage_hp_enemies[global.level-1] = boss_hp_enemies[global.level-1];
}
else{
    stage_hp_enemies[global.level-1] = normal_hp_enemies[global.level-1];
}


room_goto(room_world);
state = "mine";
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Mining Time Over
//show_debug_message("Mining Time Up!");
if(instance_exists(obj_timer)){
  with(obj_timer){
    instance_destroy();
  }
}
room_goto(room_dungeon);
if(is_first == 1){
  state = "instruction2";
  is_first = 0;
}
else{
  state = "prepare";
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//show_debug_message("number of enemies = "+string(global.num_enemies));
//show_debug_message("number of killed = "+string(global.num_killed));
switch(state){
  case "instruction1":
    //Show instructions
    if (!instance_exists(player_object)){
      randomize();
      do{
        player_pos_x = (random_range(600, 1440) div 32) * 32 + 16;
        player_pos_y = (random_range(400 , 1100) div 32) * 32 + 16;
      } until (not position_meeting(player_pos_x,player_pos_y, obj_collide_parent))
      instance_create(player_pos_x, player_pos_y, player_object);
      //show_debug_message("player pos x: " + string(player_pos_x) + "player pos y: " + string(player_pos_y));
      //show_debug_message("player object created");
    }
    if (!instance_exists(obj_msg_instruction1)){
      instance_create(player_object.phy_position_x, player_object.phy_position_y, obj_msg_instruction1);
      //instance_create(300, 480, obj_msg_instruction1);
    }
    if (keyboard_check_pressed(vk_enter)){
      if (instance_exists(obj_msg_instruction1)){
        with(obj_msg_instruction1){
          instance_destroy();
        }
      }
      state = "mine";
    }
    break;
  case "mine":
    if (!instance_exists(player_object)){
      randomize();
      do{
        player_pos_x = (random_range(600, 1440) div 32) * 32 + 16;
        player_pos_y = (random_range(400 , 1100) div 32) * 32 + 16;
      } until (not position_meeting(player_pos_x,player_pos_y, obj_collide_parent))
      instance_create(player_pos_x, player_pos_y, player_object);
    }
    if (alarm[0] == -1){
      alarm[0] = room_speed*mine_time;
      timer = instance_create(1536, 1600, obj_timer);
      timer.time = mine_time;
    }
    break;
  case "instruction2":
    if (!instance_exists(player_object)){
      instance_create(480, 256, player_object);
    }
    
    //create instruction2
    if (!instance_exists(obj_msg_instruction2)){
      instance_create(player_object.phy_position_x, player_object.phy_position_y, obj_msg_instruction2);
    }
    if (keyboard_check_pressed(vk_enter)){
      if (instance_exists(obj_msg_instruction2)){
        with(obj_msg_instruction2){
          instance_destroy();
        }
      }
  
      state = "prepare";
    }
    break;
  case "prepare":
    if (!instance_exists(player_object)){
      instance_create(480, 256, player_object);
    }
    if (alarm[1] == -1){
      alarm[1] = room_speed*prepare_time;
      timer = instance_create(1536, 1600, obj_timer);
      timer.time = prepare_time;
    }
    if (keyboard_check_pressed(ord('K'))){
      alarm[1] = 5;
    }
    break;
  case "defend":
    if(global.num_killed &gt;= global.num_enemies &amp;&amp; global.game_over == 0){
      if (alarm[2] == -1){
        alarm[2] = room_speed * 3;
      }
    }
    break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(room==1){
    audio_pause_all();
    audio_play_sound(sound0, 10, true);
}
else if(room ==2){
    audio_pause_all();
    audio_play_sound(sound1, 10, true);
}

inventory_x = 0
inventory_y = 1568
topbar_x = 2048
topbar_y = 1568

/// Inventory Slots
// Materials
inst = instance_create(32 * 4 , inventory_y + 64, obj_inv_slot_parent);
inst.sprite_index = spr_mat_fire
inst.slot_number = 0
inst = instance_create(32 * 6 , inventory_y + 64, obj_inv_slot_parent);
inst.sprite_index = spr_mat_wind
inst.slot_number = 1
inst = instance_create(32 * 8 , inventory_y + 64, obj_inv_slot_parent);
inst.sprite_index = spr_mat_thunder
inst.slot_number = 2
inst = instance_create(32 * 10 , inventory_y + 64, obj_inv_slot_parent);
inst.sprite_index = spr_mat_ice
inst.slot_number = 3


// Towers
inst = instance_create(32 * 22 , inventory_y + 64, obj_inv_slot_parent);
inst.sprite_index = spr_fire6
inst.slot_number = 4
inst = instance_create(32 * 24 , inventory_y + 64, obj_inv_slot_parent);
inst.sprite_index = spr_wind6
inst.slot_number = 5
inst = instance_create(32 * 26 , inventory_y + 64, obj_inv_slot_parent);
inst.sprite_index = spr_thunder6
inst.slot_number = 6
inst = instance_create(32 * 28 , inventory_y + 64, obj_inv_slot_parent);
inst.sprite_index = spr_ice6
inst.slot_number = 7
inst = instance_create(32 * 30 , inventory_y + 64, obj_inv_slot_parent);
inst.sprite_index = spr_tower_wall;
inst.slot_number = 12


// Center
inst = instance_create(32 * 16, inventory_y + 64, obj_inv_slot_parent);
inst.sprite_index = spr_inv_center
inst.xscale = 0.6
inst.yscale = 0.6
inst.depth = 1
inst.slot_number = 11
inst = instance_create(32 * 16, inventory_y + 32, obj_inv_slot_parent);
inst.sprite_index = spr_inv_side
inst.slot_number = 8
inst = instance_create(32 * 17 + 19, inventory_y + 96, obj_inv_slot_parent);
inst.sprite_index = spr_inv_side
inst.slot_number = 10
inst = instance_create(32 * 15 - 19, inventory_y + 96, obj_inv_slot_parent);
inst.sprite_index = spr_inv_side
inst.slot_number = 9

instance_create(0, 0, obj_topbar)
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>

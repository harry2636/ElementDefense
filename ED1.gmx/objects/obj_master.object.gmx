<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>randomize();
is_first = 1;
state = "instruction1" //instruction1, mine, prepare, instruction2, defend

//instruction_time = 
mine_time = 10;
prepare_time = 30;

global.num_enemies = 0;
global.num_killed = 0;

global.level = 1;
global.selected = 0;

global.enemy_hp = 0;
global.enemy_spd = 0;

global.mat_selected[0] = 0;
global.mat_selected[1] = 0;
global.mat_selected[2] = 0;

global.mat_fire = 20;
global.mat_wind = 20;
global.mat_thunder = 20;
global.mat_ice = 20;

global.tower_fire = 1000;
global.tower_wind = 1000;
global.tower_thunder = 1000;
global.tower_ice = 1000;

for (i = 0; i &lt; 100; i++) 
{
    do{
        randx = (random(room_width) div 32) * 32 + 16;
        randy = (random(room_height) div 32) * 32 + 16;
    } until (not position_meeting(randx,randy, obj_collide_parent))
    instance_create(randx, randy, obj_ele_fire);

    do{
        randx = (random(room_width) div 32) * 32 + 16;
        randy = (random(room_height) div 32) * 32 + 16;
    } until (not position_meeting(randx,randy, obj_collide_parent))
    instance_create(randx, randy, obj_ele_wind);

    do{
        randx = (random(room_width) div 32) * 32 + 16;
        randy = (random(room_height) div 32) * 32 + 16;
    } until (not position_meeting(randx,randy, obj_collide_parent))
    instance_create(randx, randy, obj_ele_thunder);

    do{
        randx = (random(room_width) div 32) * 32 + 16;
        randy = (random(room_height) div 32) * 32 + 16;
    } until (not position_meeting(randx,randy, obj_collide_parent))
    instance_create(randx, randy, obj_ele_ice);
}
//Stage info
stage_num_enemies[0] = 10;
stage_num_enemies[1] = 11;
stage_num_enemies[2] = 12;
stage_num_enemies[3] = 13;
stage_num_enemies[4] = 14;
stage_num_enemies[5] = 15;
stage_num_enemies[6] = 16;
stage_num_enemies[7] = 17;
stage_num_enemies[8] = 18;
stage_num_enemies[9] = 19;
stage_spd_enemies[0] = 1;
stage_spd_enemies[1] = 1;
stage_spd_enemies[2] = 1;
stage_spd_enemies[3] = 2;
stage_spd_enemies[4] = 2;
stage_spd_enemies[5] = 2;
stage_spd_enemies[6] = 3;
stage_spd_enemies[7] = 3;
stage_spd_enemies[8] = 3;
stage_spd_enemies[9] = 4;
stage_hp_enemies[0] = 1000;
stage_hp_enemies[1] = 200;
stage_hp_enemies[2] = 300;
stage_hp_enemies[3] = 400;
stage_hp_enemies[4] = 500;
stage_hp_enemies[5] = 600;
stage_hp_enemies[6] = 700;
stage_hp_enemies[7] = 800;
stage_hp_enemies[8] = 900;
stage_hp_enemies[9] = 1000;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Preparing Time Over
show_debug_message("Preparing Time Up!");
if(instance_exists(obj_timer)){
  with(obj_timer){
    instance_destroy();
  }
}
global.num_killed = 0;
global.num_enemies = stage_num_enemies[global.level-1];
global.enemy_hp = stage_hp_enemies[global.level-1];
global.enemy_spd = stage_spd_enemies[global.level-1];
state = "defend";
with(obj_enemy_spwn){
  spwn_number = global.num_enemies;
  spwn_enemy = obj_enemy_parent;
  spwned = 0;
}
//spawn monsters
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Mining Time Over
show_debug_message("Mining Time Up!");
if(instance_exists(obj_timer)){
  with(obj_timer){
    instance_destroy();
  }
}
room_goto(room1);
if(is_first == 1){
  state = "instruction2";
  is_first = 0;
}
else{
  state = "prepare";
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>show_debug_message("number of enemies = "+string(global.num_enemies));
show_debug_message("number of killed = "+string(global.num_killed));
switch(state){
  case "instruction1":
    //Show instructions
    instance_create(x,y, obj_msg_instruction1);
    if (keyboard_check_pressed(vk_enter)){
      if (instance_exists(obj_msg_instruction1)){
        with(obj_msg_instruction1){
          instance_destroy();
        }
      }
      state = "mine";
    }
    break;
  case "mine":
    if (alarm[0] == -1){
      alarm[0] = room_speed*mine_time;
      timer = instance_create(room_width div 2, 32, obj_timer);
      timer.time = mine_time;
    }
    break;
  case "instruction2":
    instance_create(x,y, obj_msg_instruction2);
    if (keyboard_check_pressed(vk_enter)){
      if (instance_exists(obj_msg_instruction2)){
        with(obj_msg_instruction2){
          instance_destroy();
        }
      }
      state = "prepare";
    }
    break;
  case "prepare":
    if (alarm[1] == -1){
      alarm[1] = room_speed*prepare_time;
      timer = instance_create(room_width div 2, 32, obj_timer);
      timer.time = prepare_time;
    }
    if (keyboard_check_pressed(ord('K'))){
      alarm[1] = 5;
    }
    break;
  case "defend":
    if (global.num_killed &gt;= global.num_enemies){
      global.level += 1;
      room_goto(room0);
      state = "mine";
    }
    break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>

<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-2</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create Bullet

tower_x = 0;
tower_y = 0;
lvl = 1;
dmg = 0;
type = 0;
proj_spd = 0;
target = -1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (target != -1){
  if (!instance_exists(target)){
    instance_destroy();
  }
  else{
      dir = point_direction(target.phy_position_x, target.phy_position_y, x, y);
      dist = point_distance(target.phy_position_x, target.phy_position_y, x, y);
      dx = lengthdir_x(proj_spd, dir);
      dy = lengthdir_y(proj_spd, dir);
      x -= dx;
      y -= dy;
      if (position_meeting(x,y,target)){
        if (lvl == 6){
          switch(type){
            case 1:
              fire_effect = instance_create(x,y, obj_effect_fire);
              //totalEnemies = instance_number(obj_enemy_parent);
              /*for (i = 0; i &lt; totalEnemies; i+=1){
                enemy_i = instance_find(obj_enemy_parent, i){
                  
                }
              }*/
              obj_enemy_parent.fire_effect = fire_effect;
              obj_enemy_parent.fire_splash_dmg = dmg;
              with(obj_enemy_parent){
                if (place_meeting(phy_position_x, phy_position_y, fire_effect)){
                  current_hp -= fire_splash_dmg;
                  timer = 90;
                }
              }
              instance_destroy();
              break;
            case 2:
              /*target.current_hp -= dmg;
              target.timer = 90;
              wind_effect = instance_create(x, y, obj_effect_wind);
              with(obj_enemy_parent){
                if (place_meeting(phy_position_x, phy_position_y, fire_effect)){
                  current_hp -= fire_splash_dmg;
                  timer = 90;
                }
              }
              target.fx_wind_timer = 4 * room_speed;
              wind_x = lengthdir_x(proj_spd*5+power(global.enemy_spd, 3), dir);
              wind_y = lengthdir_y(proj_spd*5+power(global.enemy_spd, 3), dir);
              target.wind_x = -wind_x;
              target.wind_y = -wind_y;
              with(target){
                physics_apply_impulse(phy_position_x, phy_position_y, wind_x, wind_y);
              }*/
              //t_x = target.phy_position_x;
              //t_y = target.phy_position_y;
              //pushed_dist_x = 0;
              
              instance_destroy();
              break;
            case 3:
              target.fx_thunder_timer = 10;
              target.current_hp -= dmg;
              target.timer = 90;
              instance_destroy();
              break;
            case 4:
              target.freeze_time = 3;
              target.fx_ice_timer = target.freeze_time * room_speed;
              target.frozen_x = target.phy_position_x;
              target.frozen_y = target.phy_position_y;
              target.current_hp -= dmg;
              target.timer = 90;
              instance_destroy();
              break;
          }
        }
        else{
          instance_destroy();
          target.current_hp -= dmg;
          target.timer = 90;
        }
      }
  }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
